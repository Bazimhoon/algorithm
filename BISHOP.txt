#include <iostream>
using namespace std;
#include<queue>
const int MAX = 15;
typedef pair<int, int> pair_t;
queue<pair_t> qu;
int n;
int cnt = 1;
int chess[MAX][MAX];
int chess_cp[MAX][MAX];
bool Check[MAX][MAX];
int dx[4] = { -1,0,1,0 };
int dy[4] = { 0,1,0,-1 };
int max1 = 0;

void dfs(int sr, int sc) {

	//chess_cp[sr][sc] = -1;
	Check[sr][sc] = 1;
  
		for (int i = 0; i < 4; i++) {
			int dx_num = dx[i] + sr;
			int dy_num = dy[i] + sc;
			bool flag = true;

			if (dx_num < 0 || dy_num < 0 || dx_num >= n || dy_num >= n
				|| Check[dx_num][dy_num])
				continue;

			int a = dx_num - 1;
			int b = dy_num - 1;

			while (a >= 0 && b >= 0 && a < n && b < n) {
				if (chess_cp[a][b] == -1) {
					flag = false;
					break;
				}
				a--;
				b--;

			}

			int c = dx_num - 1;
			int d = dy_num + 1;

			while (c >= 0 && d >= 0 && c < n && d < n) {
				if (chess_cp[c][d] == -1) {
					flag = false;
					break;
				}
				c--;
				d++;

			}

			int e = dx_num + 1;
			int f = dy_num - 1;

			while (e >= 0 && f >= 0 && e < n && f < n) {
				if (chess_cp[e][f] == -1) {
					flag = false;
					break;
				}
				e++;
				f--;

			}

			int g = dx_num + 1;
			int h = dy_num + 1;

			while (g >= 0 && h >= 0 && g < n && h < n) {
				if (chess_cp[g][h] == -1) {
					flag = false;
					break;
				}
				g++;
				h++;

			}


			if (chess[dx_num][dy_num] == 1 && flag == true) {
				chess_cp[dx_num][dy_num] = -1;
				cnt++;
				dfs(dx_num, dy_num);
			}
			else {
				dfs(dx_num, dy_num);
			}
		}

}
int main() {

	cin >> n;
	for (int i = 0; i < n; i++) {
		for (int p = 0; p < n; p++) {
			cin >> chess[i][p];

		}
	}
	for (int i = 0; i < n; i++) {
		for (int p = 0; p < n; p++) {
			if (chess[i][p] != 0) {
			  chess_cp[i][p] = -1;
				dfs(i, p);
				
	    if (max1 < cnt)
		    max1 = cnt;

	      cnt = 1;
	      
	 for (int x = 0; x < n; x++) {
		 for (int y = 0; y < n; y++) {

			  Check[x][y] = 0;
			  chess_cp[x][y] = 0;
		}
	}
			}
		}
	}
	cout << max1;

	return 0;
}