#include <iostream>
using namespace std;
#include<vector>
const int MAX = 1000;

vector<int> Vertex[MAX];
vector<int> reverseVertex[MAX];
bool Check[MAX], Check2[MAX];
int n, m;
int group[MAX], gm = 0;
int timer[MAX], time1 = 1;
int order[MAX], orr = 0;
void dfs(int node){
  Check[node] = true;
  
  for(int i = 0; i < Vertex[node].size(); i++){
    int node2 = Vertex[node][i];
    
    if(!Check[node2]){
      dfs(node2);
    }
  }
  // timer[node] = time1;
  // time1++;
  order[orr++] = node;
  
}
void get_my_group(int node){
  Check2[node] = true;
  
  for(int i = 0; i < reverseVertex[node].size(); i++){
    int node2 = reverseVertex[node][i];
    
    if(!Check2[node2]){
      get_my_group(node2);
    }
  }
}
int main() {

  cin >> n >> m;
  
  for(int i = 0; i < m; i++){
    int a,b;
    
    cin >> a >> b;
    
    Vertex[a].push_back(b);
    reverseVertex[b].push_back(a);
  }
  
  for(int i = 1; i <= n; i++){
    if(!Check[i]){
      dfs(i);
    }
  }
  for(int i = orr-1; i>= 0; i--){
    int node = order[i];
    if(!Check2[node]){
      get_my_group(node);
    gm++;
    }
    
  }
  cout << gm;

  return 0;
}