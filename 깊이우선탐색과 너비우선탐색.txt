#include<iostream>
#include<queue>
#include<vector>
#include<algorithm>
using namespace std;
const int MAX = 1100;
vector<int> vec[MAX];
queue<int> qu;
bool check[MAX];
bool check_bfs[MAX];

void dfs(int start){
  check[start] = 1;
  cout << start << " ";
  for(int i = 0; i < vec[start].size(); i++){
    int num = vec[start][i];
    
    if(check[num] == 0){
      dfs(num);
    }
  }
}
void bfs(int start){
  qu.push(start);
  check_bfs[start] = 1;
  
  while(!qu.empty()){
    int num = qu.front();
    cout << num << " ";
    qu.pop();
    
    
      for(int i = 0; i < vec[num].size(); i++){
        int c = vec[num][i];
        
        if(check_bfs[c] == 0){
          qu.push(c);
          check_bfs[c] = 1;
        }
      }
    
  }
  
}
int main(){
  int n, m;
  cin >> n >> m;
  
  for(int i = 0; i < m; i++){
    int a, b;
    cin >> a >> b;
    vec[a].push_back(b);
    vec[b].push_back(a);
  }
  
  for(int i = 0; i < n; i++){
    sort(vec[i].begin(), vec[i].end());
  }
  dfs(0);
  cout << endl;
  bfs(0);
  return 0;
}