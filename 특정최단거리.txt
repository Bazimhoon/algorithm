#include<iostream>
using namespace std;
#include<vector>

const int MAX = 1100;
const int INF = 4304394;
vector<int> Vertex[MAX];
vector<int> Cost[MAX];
int Table[3][MAX];
bool Check[3][MAX];
int n, m, stop1, stop2;

void Dijkstra(int start, int index){
  
  for(int i = 1; i <= n; i++){
    Table[index][i] = INF;
  }
  Table[index][start] = 0;
  
  for(int i = 1; i <= n; i++){
    int minValue = INF;
    int minIndex = -1;
    
    for(int x = 1; x <= n; x++){
      if(!Check[index][x] && Table[index][x] < minValue){
      minValue = Table[index][x];
      minIndex = x;
    }
   }
    
  Check[index][minIndex] = true;
  
  for(int j = 0; j < Vertex[minIndex].size(); j++){
    int num = Vertex[minIndex][j];
    int cost = Cost[minIndex][j];
    
    if(Table[index][num] > Table[index][minIndex] + cost)
    Table[index][num] = Table[index][minIndex] + cost;
  }
}
}
int main(){
  cin >> n >> m;
  
  for(int i = 0; i < m; i++){
    int a,b,c;
    cin >> a >> b >> c;
    
    Vertex[a].push_back(b);
    Vertex[b].push_back(a);
    Cost[a].push_back(c);
    Cost[b].push_back(c);
  }
  cin >> stop1 >> stop2;
  
  Dijkstra(1,0);
  Dijkstra(stop1,1);
  Dijkstra(stop2,2);
  
  // for(int q = 0 ; q < 3; q++){
  //   for(int r = 1; r <= n; r++){
  //     cout << Table[q][r] << " ";
  //   }
  //   cout << endl;
  // }
  
  int a = Table[0][stop1] + Table[1][stop2] + Table[2][n];
  int b = Table[0][stop2] + Table[2][stop1] + Table[1][n];
  if(a > b)
  cout << b;
  else
  cout << a;
  return 0;
  
}