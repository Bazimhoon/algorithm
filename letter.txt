#include<iostream>
using namespace std;
#include<queue>

const int MAX = 30;
int r, c;
int alpha_arr[200];
char arr[MAX][MAX];
int arr_num[MAX][MAX];
int dx[4] = { -1,0,1,0 };
int dy[4] = { 0,1,0,-1 };
int max1 = -8989;
bool Check[MAX][MAX];

void dfs(int sr, int sc, int pp) {

	int a = arr_num[sr][sc];

	alpha_arr[a] = -1;
	Check[sr][sc] = 1;

	//cout << "sr : " << sr << " " << "sc : " << " " << sc << endl;

	for (int i = 0; i < 4; i++) {
		int dx_num = sr + dx[i];
		int dy_num = sc + dy[i];

		if (dx_num <= 0 || dy_num <= 0 || dx_num > r || dy_num > c
			|| Check[dx_num][dy_num] || alpha_arr[arr_num[dx_num][dy_num]] == -1) {
			if (pp > max1) {
				max1 = pp;
				//cout << "max1 : " << max1 << endl;
			}
			continue;
		}
		else{
			dfs(dx_num, dy_num, pp + 1);
		}

	}
	alpha_arr[a] = 0;
	Check[sr][sc] = 0;
}
int main() {

	cin >> r >> c;

	for (int i = 1; i <= r; i++) {
		for (int p = 1; p <= c; p++) {
			cin >> arr[i][p];
		}
	}
	for (int i = 1; i <= r; i++) {
		for (int p = 1; p <= c; p++) {
			int a = arr[i][p];
			arr_num[i][p] = a;
			//cout << arr_num[i][p];
		}
		//cout << endl;
	}
	
	
	dfs(1, 1, 1);
	cout << max1;
	return 0;

}