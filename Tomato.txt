#include <iostream>
#include<queue>
using namespace std;

const int MAX = 110;
int n, m, h;
int box[MAX][MAX][MAX], cnt = 0;
int arr[MAX][MAX][MAX];
int idx = 0;
typedef pair<pair<int, int>, int> pair_t;
pair_t tomato[MAX];
int date = 0;
int dx[6] = { -1,0,1,0,0,0 };
int dy[6] = { 0,1,0,-1,0,0 };
int dz[6] = { 0,0,0,0,1,-1 };
bool Color[MAX][MAX][MAX];
int to = 0;
bool flag = false;
void bfs() {
	queue<pair_t> qu;

	for (int i = 0; i < cnt; i++) {
		qu.push(make_pair(make_pair(tomato[i].first.first, tomato[i].first.second), tomato[i].second));
	}

	while (!qu.empty()) {
    if(to == 0)
    break;
    
		int size = qu.size();
		date++;

		for (int x = 0; x < size; x++) {
			pair_t num = qu.front();
			qu.pop();
			for (int i = 0; i < 6; i++) {
				int height = num.first.first + dz[i];
				int row = num.first.second + dx[i];
				int col = num.second + dy[i];

				if (height < 0 || height >= h || row < 0 || row >= m
					|| col < 0 || col >= n || Color[height][row][col]
					|| arr[height][row][col] == -1 || arr[height][row][col] == 1)
					continue;

				if (!Color[height][row][col]) {
					qu.push(make_pair(make_pair(height, row), col));
					Color[height][row][col] = true;
					to--;
					//cout << "to : " << to << endl;
				}
			}
		}
	}

	if (to != 0) {
		flag = true;
		return;
	}
}
int main() {

	cin >> n >> m >> h;
	for (int x = 0; x < h; x++) {
		for (int i = 0; i < m; i++) {
			for (int p = 0; p < n; p++) {
				cin >> arr[x][i][p];

				if (arr[x][i][p] == 1) {
					tomato[cnt++] = make_pair(make_pair(x, i), p);
				}
				if (arr[x][i][p] == 0)
					to++;

			}
		}
	}

	bfs();
	if (flag == false)
		cout << date;
	else
		cout << -1;
	return 0;
}